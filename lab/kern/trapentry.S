/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text
//Just for omnicomplete

#ifdef T_DIVIDE
#define T_DIVIDE     0		// divide error
#define T_DEBUG      1		// debug exception
#define T_NMI        2		// non-maskable interrupt
#define T_BRKPT      3		// breakpoint
#define T_OFLOW      4		// overflow
#define T_BOUND      5		// bounds check
#define T_ILLOP      6		// illegal opcode
#define T_DEVICE     7		// device not available
#define T_DBLFLT     8		// double fault
/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
#define T_TSS       10		// invalid task switch segment
#define T_SEGNP     11		// segment not present
#define T_STACK     12		// stack exception
#define T_GPFLT     13		// general protection fault
#define T_PGFLT     14		// page fault
/* #define T_RES    15 */	// reserved
#define T_FPERR     16		// floating point error
#define T_ALIGN     17		// aligment check
#define T_MCHK      18		// machine check
#define T_SIMDERR   19		// SIMD floating point error

// These are arbitrarily chosen, but with care not to overlap
// processor defined exceptions or interrupt vectors.
#define T_SYSCALL   48		// system call
#define T_DEFAULT   500		// catchall

#define IRQ_OFFSET	32	// IRQ 0 corresponds to int IRQ_OFFSET

// Hardware IRQ numbers. We receive these as (IRQ_OFFSET+IRQ_WHATEVER)
#define IRQ_TIMER        0
#define IRQ_KBD          1
#define IRQ_SERIAL       4
#define IRQ_SPURIOUS     7
#define IRQ_IDE         14
#define IRQ_ERROR       19
#endif
/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER_NOEC(i_divide,	T_DIVIDE)
TRAPHANDLER_NOEC(i_debug,	T_DEBUG)
TRAPHANDLER_NOEC(i_nmi,		T_NMI)
TRAPHANDLER_NOEC(i_brkpt,	T_BRKPT)
TRAPHANDLER_NOEC(i_oflow,	T_OFLOW)		
TRAPHANDLER_NOEC(i_bound,	T_BOUND)		
TRAPHANDLER_NOEC(i_illop,	T_ILLOP)		
TRAPHANDLER_NOEC(i_device,	T_DEVICE)
TRAPHANDLER(	 i_dblflt,	T_DBLFLT)
TRAPHANDLER(	 i_coproc,	T_COPROC)
TRAPHANDLER(	 i_tss,		T_TSS)
TRAPHANDLER(	 i_segnp,	T_SEGNP)
TRAPHANDLER(	 i_stack,	T_STACK)
TRAPHANDLER(	 i_fpflt,	T_GPFLT)
TRAPHANDLER(	 i_pgflt,	T_PGFLT)
TRAPHANDLER(	 i_res,		T_RES)		
TRAPHANDLER(	 i_fperr,	T_FPERR)		
TRAPHANDLER(	 i_align,	T_ALIGN)
TRAPHANDLER(	 i_mchk,	T_MCHK)		
TRAPHANDLER(	 i_simderr, T_SIMDERR)
TRAPHANDLER_NOEC(i_syscall, T_SYSCALL)		
TRAPHANDLER_NOEC(i_default, T_DEFAULT)		

/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

	pushw $0x0
	pushw %ds
	pushw $0x0
	pushw %es

	pushal

	movl $GD_KD, %eax
	movw %ax, %ds
	movw %ax, %es

	pushl %esp

	call trap
